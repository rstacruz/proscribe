layout: false
--
<%
  require 'json'
  stopwords =   %w(a an and are as at be but by for if in into is) +
                %w(it no not of on or s such t that the their then) +
                %w(there these they this to was will with) +
                %w(class method return end if else)

  pages = page.project.pages.select { |p| p.html? && p != page && !p.root? }
  index = Hash.new { |hash, k| hash[k] = Hash.new { |hh, kk| hh[kk] = 0 } }
  words = lambda { |str| str.to_s.downcase.scan(/[A-Za-z0-9\_]+/) }
  fuzzies = lambda { |str| str = str.to_s.downcase; (1...str.size).map { |n| str[0..n] } }
  fuzzy_words = lambda { |str|
    words[str].map { |word| fuzzies[word]  if word.size > 2 and !stopwords.include?(word) }.compact.flatten
  }

  urls = pages.map { |p| p.path }

  page_index = pages.inject([]) { |h, p| h << { :title => p.to_s, :url => p.path, :type => p.meta.page_type.to_s.capitalize || '', :parent => (urls.index(p.parent.path) if p.parent?) }; h }

  pages.each do |p|
    i = urls.index(p.path)

    if p.to_s.count(' ') > 0
      # Partial title match
      fuzzy_words[p].each { |word| index[word][i] += 30 }

    else
      # Exact title match
      fuzzy_words[p].each { |word| index[word][i] += 60 }
    end

    # Fuzzy title match
    fuzzy_words[p].each { |word| index[word][i] += 3 }

    # p content
    fuzzy_words[p.content].each { |word| index[word][i] += 1 }
  end
%>

window.SearchIndex = (<%= index.to_json %>);
window.PageIndex = (<%= page_index.to_json %>);
